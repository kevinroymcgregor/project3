{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/Navbar/Navbar.js","components/Pages/Landing.js","components/auth/Register.js","components/auth/Login.js","components/private-route/PrivateRoute.js","components/Pages/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","Navbar","className","to","style","fontFamily","Component","Landing","height","width","borderRadius","letterSpacing","Register","onChange","e","setState","target","id","value","onSubmit","preventDefault","newUser","firstName","lastName","email","password","password2","city","zipCode","phone","props","registerUser","history","this","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","Dashboard","onLogoutClick","onClick","jwtToken","currentTime","Date","now","exp","location","href","App","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.948a2727.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\n\r\nexport default setAuthToken;","/**************************************** \r\nFlow for our actions will be as follows:\r\n1. Import dependencies and action definitions from types.js\r\n2. Use axios to make HTTPRequests within certain action\r\n3. Use dispatch to send actions to our reducers\r\n******************************************/\r\n\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","\r\n//Reducers are pure functions that specify how application state should change in response to an action. Reducers respond with the new state, which is passed to our store and, in turn, our UI. //\r\n\r\n/**************************************** \r\nFlow for reducers will go as follows:\r\n1. Import all our actions from our types.js file\r\n2. Define our initialState\r\n3. Define how state should change based on actions with a switch statement \r\n******************************************/\r\n\r\nimport {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n  };\r\n\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","//We’ll use combinedReducers from redux to combine our authReducer and errorReducer into one rootReducer.//\r\nimport { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        : f => f\r\n  )\r\n);\r\nexport default store;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"z-depth-0\">\r\n          <div className=\"nav-wrapper white\">\r\n            <Link\r\n              to=\"/\"\r\n              style={{\r\n                fontFamily: \"monospace\"\r\n              }}\r\n              className=\"col s5 brand-logo center black-text\"\r\n            >\r\n              <i className=\"material-icons\">code</i>\r\n              RETRO GAMES\r\n            </Link>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 center-align\">\r\n            <h4>\r\n              Authentication Page -- Login / Register\r\n            </h4>\r\n            <br />\r\n            <div className=\"col s6\">\r\n              <Link\r\n                to=\"/register\"\r\n                style={{\r\n                  width: \"140px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\"\r\n                }}\r\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n              >\r\n                Register\r\n              </Link>\r\n            </div>\r\n            <div className=\"col s6\">\r\n              <Link\r\n                to=\"/login\"\r\n                style={{\r\n                  width: \"140px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\"\r\n                }}\r\n                className=\"btn btn-large btn-flat waves-effect white black-text\"\r\n              >\r\n                Log In\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      phone: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zipCode: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newUser = {\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2,\r\n      city: this.state.city,\r\n      state: this.state.state,\r\n      zipCode: this.state.zipCode,\r\n      phone: this.state.phone,\r\n      errors: {}\r\n    };\r\n\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n              <i className=\"material-icons left\">keyboard_backspace</i> Home\r\n            </Link>\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Register</b>\r\n              </h4>\r\n              <p className=\"grey-text text-darken-1\">\r\n                Already have an account? <Link to=\"/login\">Login</Link>\r\n              </p>\r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.firstName}\r\n                  error={errors.firstName}\r\n                  id=\"firstName\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.firstName\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">First Name</label>\r\n                <span className=\"red-text\">{errors.firstName}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.lastName}\r\n                  error={errors.lastName}\r\n                  id=\"lastName\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.lastName\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Last Name</label>\r\n                <span className=\"red-text\">{errors.lastName}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">{errors.email}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">{errors.password}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password2\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password2\">Confirm Password</label>\r\n                <span className=\"red-text\">{errors.password2}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.city}\r\n                  error={errors.city}\r\n                  id=\"city\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.city\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">City</label>\r\n                <span className=\"red-text\">{errors.city}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.state}\r\n                  error={errors.state}\r\n                  id=\"state\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.state\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">State</label>\r\n                <span className=\"red-text\">{errors.state}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.zipCode}\r\n                  error={errors.zipCode}\r\n                  id=\"zipCode\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.zipCode\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Zip Code</label>\r\n                <span className=\"red-text\">{errors.zipCode}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.phone}\r\n                  error={errors.phone}\r\n                  id=\"phone\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.phone\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Phone</label>\r\n                <span className=\"red-text\">{errors.phone}</span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Register\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\n//mapStateToProps allows us to get our state from Redux and map it to props which we can use inside components\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\n//connects our React components to our Redux store provided by the Provider component\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\n\r\n    this.props.loginUser(userData);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div style={{ marginTop: \"4rem\" }} className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\r\n              home\r\n            </Link>\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Login</b> below\r\n              </h4>\r\n              <p className=\"grey-text text-darken-1\">\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email || errors.emailnotfound\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">\r\n                  {errors.email}\r\n                  {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password || errors.passwordincorrect\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">\r\n                  {errors.password}\r\n                  {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Login\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\r\n        <div className=\"row\">\r\n          <div className=\"landing-copy col s12 center-align\">\r\n            <h4>\r\n              <p className=\"flow-text grey-text text-darken-1\">\r\n                You are logged into a full-stack{\" \"}\r\n                <span style={{ fontFamily: \"monospace\" }}>Main User Page</span>\r\n              </p>\r\n            </h4>\r\n            <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\"\r\n              }}\r\n              onClick={this.onLogoutClick}\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n            >\r\n              Logout\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\n\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Landing from \"./components/Pages/Landing\";\r\nimport Register from \"./components/auth/Register\";\r\nimport Login from \"./components/auth/Login\";\r\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\r\nimport Dashboard from \"./components/Pages/Dashboard\";\r\n\r\nimport \"./App.css\";\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Switch>\r\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}